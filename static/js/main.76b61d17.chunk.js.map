{"version":3,"sources":["devices/camera/Hide.tsx","devices/test-rig/ErrorView.tsx","devices/test-rig/Json.tsx","devices/test-rig/Scenarios.ts","devices/test-rig/MediaStreamTrackView.tsx","devices/VideoElement.tsx","devices/test-rig/StreamView.tsx","devices/test-rig/test-rig.tsx","devices/camera/DeviceDemonstratorContext.ts","devices/camera/BigScreen.tsx","devices/camera/CameraPicker.tsx","devices/camera/RecordingDirector.ts","devices/camera/CameraDemonstrator.tsx","index.tsx"],"names":["Hide","props","hide","Fragment","children","ErrorView","error","name","constructor","message","JSON","stringify","Json","content","contentAsJsonString","mediaStream","input","promise","a","success","messages","passUndefined","summary","description","constraints","undefined","expected","prompt","denied","granted","checks","what","predicate","err","TypeError","toString","allConstraintsFalse","audio","video","noDeviceWithDeviceId","deviceId","stream","active","id","length","existingDevice","DOMException","actual","scenarios","result","Map","set","collectScenarios","MediaStreamTrackView","track","capabilities","getCapabilities","readyState","String","enabled","kind","label","muted","getConstraints","getSettings","VideoElement","srcObject","rest","videoElement","useRef","useEffect","node","current","ref","StreamView","useState","forceRender","triggerRender","prev","tracks","getTracks","tracksNode","map","key","style","display","flexDirection","onClick","forEach","stop","autoPlay","reconstructPromiseFrom","Error","Promise","reject","resolve","initial","permissionState","scenarioSummary","TestRig","selectedScenario","setSelectedScenario","constraintsAsString","setConstraintsAsString","parseError","setParseError","setConstraints","getUserMediaResult","setGetUserMediaResult","results","setResults","setPermissionState","parsedConstraints","parse","e","scenarioConstrains","get","scenarioConstraintsAsString","summaries","Array","from","keys","thisOne","includes","handleRunChecks","scenario","check","details","all","onChange","value","target","navigator","mediaDevices","getUserMedia","then","catch","disabled","MediaStream","checkIndex","messagesView","messageIndex","getSupportedConstraints","Context","React","createContext","useRecordingDirector","maybe","useContext","recordingDirector","useVideoStreamFrom","device","streamError","state","setState","mediaStreamSubscription","videoStreamSubscriptionFor","onDeviceRemoved","cancel","BigScreen","setDevice","handleDeviceSelectionChange","addOnCameraSelectionChanged","removeOnCameraSelectionChanged","clearCameraSelection","CameraPreview","index","streamAvailable","groupId","selectCamera","width","CameraPicker","showPreviews","forceReRender","availableDevicesChanged","cur","addOnUpdateDevicesListener","removeOnUpdateDevicesListener","button","previews","cameras","doNothing","DefaultMediaStreamSubscription","subscriptionDetails","_onDeviceRemoved","_canceled","_deviceRemoved","listener","this","cancelSubscription","SubscriptionLedger","subscriptionsByDevice","subscription","creator","maybeValue","getOrAdd","deviceIdentifier","subscriptions","subscriptionIdentifier","removedDeviceIds","entries","filter","d","ledger","values","reduce","concat","onNoMoreSubscribers","entry","delete","size","RecordingDirector","onUpdateDevicesListeners","Set","subscriptionLedger","devices","onCameraSelectionChangedListeners","selectedCamera","newDevices","availableDevicesId","dev","splice","push","it","subscriptionsTo","sub","deviceRemoved","streamForDevice","uuid","addSubscriber","removeSubscriber","close","maybeAlreadyAvailableStream","streamFor","videoStreamFor","enumerateDevices","devicesWithLabels","console","log","updateDevices","camera","add","logDeviceInformation","devicesString","join","CameraDemonstrator","showCameraPicker","setShowCameraPicker","Demonstrator","mediaDeviceInfos","mediaDeviceInfo","fetchDevices","addEventListener","Provider","setupCameraDemonstrator","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76b61d17.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface HideProps {\n    hide: boolean;\n}\n\nexport const Hide: React.FC<HideProps> = (props) => {\n    if (props.hide) {\n        return null;\n    }\n    return <React.Fragment>\n        {props.children}\n    </React.Fragment>;\n};\n","import React from 'react';\n\nexport const ErrorView: React.FC<{ error: Error }> = (props) => {\n    const { error } = props;\n\n    return <dl>\n        <dt>error.name</dt>\n        <dd>{error.name}</dd>\n\n        <dt>error.constructor.name</dt>\n        <dd>{error.constructor.name}</dd>\n\n        <dt>error.message</dt>\n        <dd>{error.message}</dd>\n\n        <dt>JSON.stringify(error, null, 2)</dt>\n        <dd>{JSON.stringify(error, null, 2)}</dd>\n    </dl>\n};\n","import React from 'react';\n\ninterface JsonProps {\n    content: any;\n}\n\nexport const Json: React.FC<JsonProps> = ({ content}) => {\n    const contentAsJsonString = JSON.stringify(content, null, 2);\n    return <pre>{contentAsJsonString}</pre>\n};\n","export type MediaStreamCheckResult = { success: boolean, messages?: Array<string> }\ntype MediaStreamPredicate = (mediaStream: MediaStream) => MediaStreamCheckResult\ntype ErrorPredicate = (error: Error) => MediaStreamCheckResult\ntype MediaStreamPromisePredicate = (mediaStream: Promise<MediaStream>) => Promise<MediaStreamCheckResult>\n\nconst mediaStream: (input: MediaStreamPredicate) => MediaStreamPromisePredicate = (input: MediaStreamPredicate) => {\n    return async (promise: Promise<MediaStream>) => input(await promise);\n};\nconst error: (input: ErrorPredicate) => MediaStreamPromisePredicate = (input: ErrorPredicate) => {\n    return async (promise: Promise<MediaStream>) => {\n        try {\n            await promise;\n            return { success: false, messages: ['expected a rejected promise'] };\n        } catch (e) {\n            return input(e);\n        }\n    };\n};\n\ntype MediaStreamCheck = {\n    what: string;\n    predicate: MediaStreamPromisePredicate\n}\n\ninterface Expected {\n    description: string;\n    checks: MediaStreamCheck[]\n}\n\ntype Matrix = Record<PermissionState, Expected | undefined>\n\nexport interface Scenario {\n    summary: string;\n    description: string;\n    constraints?: MediaStreamConstraints;\n    expected: Matrix;\n}\n\nexport const passUndefined: Scenario = {\n    summary: 'undefined constraints',\n    description: 'pass undefined as constraints',\n    constraints: undefined,\n    expected: {\n        prompt: undefined,\n        denied: undefined,\n        granted: {\n            description: 'reject and communicate that at least one constrain has to be present',\n            checks: [\n                {\n                    what: 'TypeError',\n                    predicate: error((err) => {\n                        const success = err instanceof TypeError;\n                        const messages = [`got: ${err.toString()}`];\n                        return { success, messages };\n                    })\n                }, {\n                    what: 'error message',\n                    predicate: error((err) => {\n                        const expected = `Failed to execute 'getUserMedia' on 'MediaDevices': At least one of audio and video must be requested`;\n                        const success = err.message === expected;\n                        const messages = [\n                            `expected: ${expected}`,\n                            `got: '${err.message}'`\n                        ];\n                        return { success, messages };\n                    })\n                }\n            ]\n        }\n    }\n};\n\nexport const allConstraintsFalse: Scenario = {\n    summary: 'all constraints false',\n    description: 'pass false to the video and audio constraint',\n    constraints: {\n        audio: false,\n        video: false\n    },\n    expected: {\n        prompt: undefined,\n        denied: undefined,\n        granted: {\n            description: 'reject and communicate that at least one constrain has to be set to true',\n            checks: [\n                {\n                    what: 'TypeError',\n                    predicate: error((err) => {\n                        const success = err instanceof TypeError;\n                        const messages = [`got: ${err.toString()}`];\n                        return { success, messages };\n                    })\n                }, {\n                    what: 'error message',\n                    predicate: error((err) => {\n                        const expected = `Failed to execute 'getUserMedia' on 'MediaDevices': At least one of audio and video must be requested`;\n                        const success = err.message === expected;\n                        const messages = [\n                            `expected: ${expected}`,\n                            `got: '${err.message}'`\n                        ];\n                        return { success, messages };\n                    })\n                }\n            ]\n        }\n    }\n};\n\n\nexport const noDeviceWithDeviceId: Scenario = {\n    summary: 'bogus device id',\n    description: 'the constraint contains a deviceId that no device has',\n    constraints: { audio: { deviceId: 'bogus' } },\n    expected: {\n        prompt: undefined,\n        denied: undefined,\n        granted: {\n            description: 'fallback to any other audio device',\n            checks: [\n                {\n                    what: 'stream is active',\n                    predicate: mediaStream((stream) => {\n                        const success = stream.active;\n                        return { success };\n                    })\n                }\n                , {\n                    what: 'stream has an id',\n                    predicate: mediaStream((stream) => {\n                        const success = stream.id.length > 0;\n                        return { success };\n                    })\n                }\n            ]\n        }\n    }\n};\n\nexport const existingDevice: Scenario = {\n    summary: 'existing device',\n    description: 'any camera device without any other constraints',\n    constraints: { video: true },\n    expected: {\n        prompt: undefined,\n        denied: {\n            description: 'should be rejected',\n            checks: [\n                {\n                    what: 'DOMException',\n                    predicate: error((error) => {\n                        const success = error instanceof DOMException;\n                        const messages = [\n                            `got: ${error.constructor.name}`\n                        ];\n                        return { success, messages };\n                    })\n                },\n                {\n                    what: 'NotAllowedError',\n                    predicate: error((error) => {\n                        const actual = error.name;\n                        const success = actual === 'NotAllowedError';\n                        const messages = [\n                            `got: ${actual}`\n                        ];\n                        return { success, messages };\n                    })\n                }\n            ]\n        },\n        granted: {\n            description: 'tbd',\n            checks: []\n        }\n    }\n};\n\nconst collectScenarios = () => {\n    const result = new Map<string, Scenario>();\n    result.set(existingDevice.summary, existingDevice);\n    result.set(noDeviceWithDeviceId.summary, noDeviceWithDeviceId);\n    result.set(passUndefined.summary, passUndefined);\n    result.set(allConstraintsFalse.summary, allConstraintsFalse);\n    return result;\n};\n\nexport const scenarios = collectScenarios();\n\n","import React from 'react';\nimport { Json } from './Json';\n\nexport type MediaStreamTrackViewProps = Pick<MediaStreamTrack, 'id' | 'enabled' | 'kind' | 'label' | 'muted' | 'readyState'> & { track: MediaStreamTrack }\n\nexport const MediaStreamTrackView: React.FC<MediaStreamTrackViewProps> = (props) => {\n    const { track } = props;\n    const capabilities = track.getCapabilities ? track.getCapabilities(): 'track.getCapabilities does not exist';\n    return (\n        <dl>\n            <dt>id</dt>\n            <dd>{props.id}</dd>\n            <dt>readyState</dt>\n            <dd>{props.readyState}</dd>\n            <dt>enabled</dt>\n            <dd>{String(props.enabled)}</dd>\n            <dt>kind</dt>\n            <dd>{props.kind}</dd>\n            <dt>label</dt>\n            <dd>{props.label}</dd>\n            <dt>muted</dt>\n            <dd>{String(props.muted)}</dd>\n            <dt>capabilities</dt>\n            <dd>\n                <Json content={capabilities}/>\n            </dd>\n            <dt>constraints</dt>\n            <dd>\n                <Json content={track.getConstraints()}/>\n            </dd>\n            <dt>settings</dt>\n            <dd>\n                <Json content={track.getSettings()}/>\n            </dd>\n        </dl>\n    );\n};\n","import React, { useEffect, useRef } from 'react';\n\nexport interface HTMLVideoElementProps extends React.VideoHTMLAttributes<HTMLVideoElement> {\n    srcObject: MediaStream | null;\n}\n\nexport const VideoElement: React.FC<HTMLVideoElementProps> = ({ srcObject = null, muted = false, ...rest }) => {\n    const videoElement = useRef<HTMLVideoElement>(null);\n    useEffect(() => {\n        const node = videoElement.current;\n        if (node === null) {\n            return;\n        }\n        if (node.srcObject !== srcObject) {\n            node.srcObject = srcObject;\n        }\n        if (node.muted !== muted) {\n            node.muted = muted;\n        }\n    }, [srcObject, muted]);\n    return <video {...rest} ref={videoElement}/>;\n};\n","import React, { CSSProperties, useState } from 'react';\nimport { MediaStreamTrackView } from './MediaStreamTrackView';\nimport { VideoElement } from '../VideoElement';\n\nexport interface StreamViewProps {\n    stream: MediaStream | null\n}\n\nexport const StreamView: React.FC<StreamViewProps> = (props) => {\n    const { stream } = props;\n    const [_, forceRender] = useState(true);\n\n    const triggerRender = () => {\n        forceRender(prev => !prev);\n    };\n\n    const tracks = (): Array<MediaStreamTrack> => {\n        const maybeStream = stream;\n        if (null === maybeStream) {\n            return [];\n        }\n        return maybeStream.getTracks();\n    };\n\n    const handlePause = () => {\n        tracks().forEach(track => track.enabled = false);\n        triggerRender();\n    };\n\n    const handleContinue = () => {\n        tracks().forEach(track => track.enabled = true);\n        triggerRender();\n    };\n\n    const handleStop = () => {\n        tracks().forEach(track => track.stop());\n        triggerRender();\n    };\n\n    const topStyles: CSSProperties = {\n        display: 'flex'\n    };\n\n    const controlStyles: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column'\n    };\n\n    const tracksNode = tracks().map(track => {\n        return (<li key={track.id}>\n            <MediaStreamTrackView enabled={track.enabled} id={track.id} kind={track.kind} label={track.label} muted={track.muted} readyState={track.readyState} track={track}/>\n        </li>);\n    });\n    return (\n        <div style={topStyles}>\n            <h1>Scenario View</h1>\n            <div style={controlStyles}>\n                <button onClick={handlePause}>pause</button>\n                <button onClick={handleContinue}>continue</button>\n                <button onClick={handleStop}>stop</button>\n            </div>\n            <VideoElement id=\"video-chat\" srcObject={stream} autoPlay={true}/>\n            {stream && <div>\n                <h2>stream</h2>\n                <ul>\n                    <li>id: {stream.id}</li>\n                    <li>active: {JSON.stringify(stream.active)}</li>\n                </ul>\n                <h2>tracks</h2>\n                <ul>\n                    {tracksNode}\n                </ul>\n            </div>}\n        </div>\n    );\n};\n","import React, { CSSProperties, useEffect, useState } from 'react';\nimport { Hide } from '../camera/Hide';\nimport { ErrorView } from './ErrorView';\nimport { Json } from './Json';\nimport { allConstraintsFalse, MediaStreamCheckResult, scenarios } from './Scenarios';\nimport { StreamView } from './StreamView';\n\nexport interface Result {\n    what: string;\n    details: MediaStreamCheckResult;\n}\n\ntype GetUserMediaResult = MediaStream | Error\n\nconst reconstructPromiseFrom = (result: GetUserMediaResult): Promise<MediaStream> => {\n    if (result instanceof Error) {\n        return Promise.reject(result);\n    }\n    return Promise.resolve(result);\n};\n\nconst initial: { permissionState: PermissionState, scenarioSummary: string } = {\n    permissionState: 'granted',\n    scenarioSummary: allConstraintsFalse.summary\n};\n\nexport const TestRig: React.FC<{}> = () => {\n    const [selectedScenario, setSelectedScenario] = useState<string>();\n    const [constraintsAsString, setConstraintsAsString] = useState('');\n    const [parseError, setParseError] = useState<boolean>(false);\n    const [constraints, setConstraints] = useState<MediaStreamConstraints>();\n    const [getUserMediaResult, setGetUserMediaResult] = useState<GetUserMediaResult | null>(null);\n    const [results, setResults] = useState<Result[]>([]);\n    const [permissionState, setPermissionState] = useState<PermissionState>(initial.permissionState);\n\n    useEffect(() => {\n        try {\n            const parsedConstraints = (constraintsAsString === 'undefined') ? undefined : JSON.parse(constraintsAsString);\n            setConstraints(parsedConstraints);\n            setParseError(false);\n        } catch (e) {\n            setParseError(true);\n        }\n    }, [constraintsAsString, setParseError]);\n\n    useEffect(() => {\n        if (selectedScenario === undefined) {\n            const summaries = Array.from(scenarios.keys());\n            const thisOne = summaries.includes(initial.scenarioSummary)? initial.scenarioSummary : summaries[0];\n            setSelectedScenario(thisOne);\n            return;\n        }\n        const scenarioConstrains = scenarios.get(selectedScenario)?.constraints;\n        const scenarioConstraintsAsString = scenarioConstrains === undefined ? 'undefined' : JSON.stringify(scenarioConstrains, null, 2);\n        setConstraintsAsString(scenarioConstraintsAsString);\n    }, [selectedScenario]);\n\n    useEffect(() => {\n        setResults(() => []);\n    }, [selectedScenario]);\n\n    const handleStart = () => {\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then((stream: MediaStream) => setGetUserMediaResult(() => stream))\n            .catch((err: Error) => setGetUserMediaResult(() => err));\n    };\n\n    const handleDetach = () => {\n        if (getUserMediaResult instanceof MediaStream) {\n            getUserMediaResult.getTracks().forEach(track => track.stop())\n        }\n        setGetUserMediaResult(null);\n    };\n\n    const handleRunChecks = async () => {\n        const scenario = scenarios.get(selectedScenario ?? '');\n        if (scenario === undefined || getUserMediaResult === null) {\n            return;\n        }\n        const checks = scenario.expected[permissionState]?.checks ?? [];\n        const results = checks.map(async check => {\n            let result: MediaStreamCheckResult;\n            try {\n                result = await check.predicate(reconstructPromiseFrom(getUserMediaResult));\n            } catch (e) {\n                const messages = [`check threw exception ${e.toString()}`];\n                result = { success: false, messages };\n            }\n            return ({\n                what: check.what,\n                details: result\n            });\n        });\n        setResults(await Promise.all(results));\n    };\n\n    const handleClearChecks = () => {\n        setResults(() => []);\n    };\n\n    const blub: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column'\n    };\n    const banana: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'row'\n    };\n\n    return <div>\n        <h1 key={'test-rig'}>Test Rig{parseError ? ' (parse error)' : ''}</h1>\n        <div style={banana}>\n            <div style={blub}>\n                <select name=\"device\">\n                    <option>camera</option>\n                    <option>microphone</option>\n                </select>\n                <select name=\"permission\" onChange={(e) => {\n                    const value = e.target.value;\n                    if (value === 'granted' || value === 'denied' || value === 'prompt') {\n                        setPermissionState(value);\n                    }\n                }} value={permissionState}>\n                    <option value={'granted'}>granted</option>\n                    <option value={'denied'}>denied</option>\n                    <option value={'prompt'}>prompt</option>\n                </select>\n                <select name=\"scenarios\" onChange={(e) => setSelectedScenario(e.target.value)}>\n                    {Array.from(scenarios.keys()).map(summary => <option value={summary} key={summary}>{summary}</option>)}\n                </select>\n            </div>\n            <textarea value={constraintsAsString} onChange={(e) => setConstraintsAsString(e.target.value)}/>\n            <button onClick={handleStart}>start</button>\n            <button disabled={getUserMediaResult === null} onClick={handleRunChecks}>run checks</button>\n            <button onClick={handleClearChecks}>clear checks</button>\n            <button onClick={handleDetach}>detach</button>\n            <ul key={'results'}>\n                {results.map((result, checkIndex) => {\n                    const success = result.details.success ? '✅' : '❌';\n                    const messages = result.details.messages ?? [];\n\n                    const showMessages = !result.details.success && messages.length !== 0;\n                    const messagesView = showMessages ? <ul key={`message ${checkIndex}`}>\n                        {messages.map((message, messageIndex) => <li key={`message ${checkIndex} ${messageIndex}`}>{message}</li>)}\n                    </ul> : null;\n\n                    return <React.Fragment key={`doombuggy ${checkIndex}`}>\n                        <li key={`check result ${checkIndex}`}>{`${success}: ${result.what}`}</li>\n                        {messagesView}\n                    </React.Fragment>;\n                })}\n            </ul>\n        </div>\n        {getUserMediaResult === null ? null :\n            getUserMediaResult instanceof MediaStream ?\n                <StreamView stream={getUserMediaResult}/> :\n                <ErrorView error={getUserMediaResult}/>}\n        <Hide hide={true}>\n            <Json content={navigator.mediaDevices.getSupportedConstraints()}/>\n        </Hide>\n    </div>;\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Device, RecordingDirector } from './RecordingDirector';\n\nexport interface DeviceDemonstratorContext {\n    recordingDirector: RecordingDirector;\n}\n\nexport const Context = React.createContext<DeviceDemonstratorContext | void>(undefined);\n\nexport const useRecordingDirector = (): RecordingDirector => {\n    const maybe = useContext(Context);\n    if (undefined === maybe) {\n        throw new Error('Context not available in component tree parents');\n    }\n    return maybe.recordingDirector;\n};\n\nexport type StreamError = 'CouldNotOpen' | 'DeviceRemoved';\n\nexport interface VideoStream {\n    stream: MediaStream | null;\n    streamError: StreamError | 'none';\n}\n\nexport const useVideoStreamFrom = (device: Device | void): VideoStream => {\n    const recordingDirector = useRecordingDirector();\n    const [state, setState] = useState<VideoStream>({ stream: null, streamError: 'none' });\n    useEffect(() => {\n        if (undefined === device) {\n            return;\n        }\n        const mediaStreamSubscription = recordingDirector.videoStreamSubscriptionFor(device);\n        mediaStreamSubscription.onDeviceRemoved(() => {\n            mediaStreamSubscription.cancel()\n            setState({ stream: null, streamError: 'DeviceRemoved' });\n        });\n        mediaStreamSubscription.stream\n            .then(stream => setState(() => ({ stream, streamError: 'none' })))\n            .catch(() => setState(() => ({ stream: null, streamError: 'CouldNotOpen' })));\n        return () => {\n            mediaStreamSubscription.cancel();\n            setState(() => ({ stream: null, streamError: 'none' }));\n        };\n    }, [recordingDirector, device]);\n    return state;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useRecordingDirector, useVideoStreamFrom } from './DeviceDemonstratorContext';\nimport { Device } from './RecordingDirector';\nimport { VideoElement } from '../VideoElement';\n\nexport const BigScreen: React.FC = () => {\n    const [device, setDevice] = useState<Device | void>(undefined);\n    const recordingDirector = useRecordingDirector();\n\n    useEffect(() => {\n        const handleDeviceSelectionChange = (device: Device | void): void => {\n            setDevice(() => device);\n        };\n        recordingDirector.addOnCameraSelectionChanged(handleDeviceSelectionChange);\n        return () => {\n            recordingDirector.removeOnCameraSelectionChanged(handleDeviceSelectionChange);\n        };\n    }, [recordingDirector]);\n    const { stream, streamError } = useVideoStreamFrom(device);\n    if (device === undefined) {\n        return <div>No device selected</div>;\n    }\n    if (!(streamError === 'none')) {\n        return <div>{streamError}</div>;\n    }\n    if (stream === null) {\n        return <div>Opening stream</div>;\n    }\n    const handleVideoClicked = () => {\n        recordingDirector.clearCameraSelection();\n    };\n    return (\n        <div>\n            <VideoElement srcObject={stream} autoPlay={true} onClick={handleVideoClicked}/>\n            <div>{stream.id}</div>\n        </div>\n    );\n};\n","import React, { CSSProperties, useEffect, useState } from 'react';\nimport { useRecordingDirector, useVideoStreamFrom } from './DeviceDemonstratorContext';\nimport { Device, RecordingDirector } from './RecordingDirector';\nimport { VideoElement } from '../VideoElement';\n\nexport interface CameraPreviewProps {\n    recordingDirector: RecordingDirector;\n    device: Device;\n    index: number;\n}\n\nexport const CameraPreview: React.FC<CameraPreviewProps> = (props) => {\n    const { recordingDirector, device, index } = props;\n    const { stream, streamError } = useVideoStreamFrom(device);\n\n    const handleSelect = () => {\n        recordingDirector.selectCamera(device);\n    };\n\n    const streamAvailable = streamError === 'none';\n    return (\n        <div>\n            <h4>Camera {index}</h4>\n            <ul>\n                <li>device label: {device.label}</li>\n                <li>device id: {device.deviceId}</li>\n                <li>group id: {device.groupId}</li>\n                <li>stream id: {stream?.id ?? 'no-stream'}</li>\n            </ul>\n            {!streamAvailable && <div>{streamError}</div>}\n            {streamAvailable && <VideoElement onClick={handleSelect} width={150} srcObject={stream} autoPlay={true}/>}\n        </div>\n    );\n};\n\nexport const CameraPicker: React.FC = () => {\n    const recordingDirector = useRecordingDirector();\n    const [{ showPreviews }, setState] = useState({ showPreviews: false, forceReRender: 0 });\n    useEffect(() => {\n        const availableDevicesChanged = () => {\n            setState((cur) => ({\n                ...cur,\n                forceReRender: cur.forceReRender + 1\n            }));\n        };\n        recordingDirector.addOnUpdateDevicesListener(availableDevicesChanged);\n        return () => {\n            recordingDirector.removeOnUpdateDevicesListener(availableDevicesChanged);\n        };\n    }, [recordingDirector]);\n\n    const handleShowPreview = () => setState(cur => ({ ...cur, showPreviews: true }));\n\n    const handleHidePreview = () => setState(cur => ({ ...cur, showPreviews: false }));\n\n    const button = showPreviews ? <button onClick={handleHidePreview}>Hide Previews</button> : <button onClick={handleShowPreview}>Show Previews</button>;\n    const previews = showPreviews ? recordingDirector.cameras()\n        .map((device, index) => <CameraPreview key={device.deviceId} index={index} device={device} recordingDirector={recordingDirector}/>) : null;\n    const style: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column'\n    };\n    return (\n        <div style={style}>\n            {button}\n            {previews}\n        </div>\n    );\n};\n","import { uuid } from 'uuidv4';\n\nexport type Device = Pick<MediaDeviceInfo, 'groupId' | 'deviceId' | 'kind' | 'label'>;\n\nexport type OnCameraSelectionChangedListener = (newCamera: Device | void) => void;\nexport type OnUpdateDevicesListener = () => void;\n\ninterface SubscriptionDetails {\n    readonly deviceIdentifier: DeviceIdentifier\n    readonly subscriptionIdentifier: SubscriptionIdentifier;\n    stream: Promise<MediaStream>\n}\n\nconst doNothing = () => {\n};\n\nexport interface MediaStreamSubscription {\n    readonly stream: Promise<MediaStream>;\n\n    onDeviceRemoved: (listener: () => void) => void\n\n    cancel(): void;\n}\n\nclass DefaultMediaStreamSubscription implements MediaStreamSubscription {\n    private _onDeviceRemoved = () => {\n    };\n    private _canceled = false;\n    private _deviceRemoved = false;\n\n    constructor(\n        private readonly recordingDirector: RecordingDirector,\n        public readonly subscriptionDetails: SubscriptionDetails) {\n    }\n\n    get stream() {\n        if (this._canceled || this._deviceRemoved) {\n            return Promise.reject('subscription canceled');\n        }\n        return this.subscriptionDetails.stream;\n    }\n\n    onDeviceRemoved(listener: () => void) {\n        this._onDeviceRemoved = listener;\n    }\n\n    deviceRemoved() {\n        this._deviceRemoved = true;\n        this._onDeviceRemoved();\n    }\n\n    cancel() {\n        this.recordingDirector.cancelSubscription(this.subscriptionDetails);\n        this._canceled = true;\n    }\n}\n\nconst getOrAdd = <Key, Value>(map: Map<Key, Value>, key: Key, creator: (key: Key) => Value): Value => {\n    const maybeValue = map.get(key);\n    if (maybeValue !== undefined) {\n        return maybeValue;\n    }\n    const value = creator(key);\n    map.set(key, value);\n    return value;\n};\n\ntype DeviceIdentifier = string;\ntype SubscriptionIdentifier = string;\n\ninterface SubscriptionLedgerEntry {\n    subscriptions: Map<SubscriptionIdentifier, DefaultMediaStreamSubscription>;\n    stream: Promise<MediaStream>;\n}\n\nclass SubscriptionLedger {\n    private readonly subscriptionsByDevice = new Map<DeviceIdentifier, SubscriptionLedgerEntry>();\n\n    addSubscriber(subscription: DefaultMediaStreamSubscription) {\n        const newEntry = () => ({ stream: subscription.stream, subscriptions: new Map<SubscriptionIdentifier, DefaultMediaStreamSubscription>() });\n        const details = subscription.subscriptionDetails;\n        const entry = getOrAdd(this.subscriptionsByDevice, details.deviceIdentifier, newEntry);\n        entry.subscriptions.set(details.subscriptionIdentifier, subscription);\n    }\n\n    subscriptionsTo(removedDeviceIds: string[]): DefaultMediaStreamSubscription[] {\n        return Array.from(this.subscriptionsByDevice.entries())\n            .filter(([d, _]) => removedDeviceIds.includes(d))\n            .map(([_, ledger]) => Array.from(ledger.subscriptions.values()))\n            .reduce((prev, cur) => prev.concat(cur), []);\n    }\n\n    removeSubscriber(subscriptionDetails: SubscriptionDetails, onNoMoreSubscribers: (stream: Promise<MediaStream>) => void = doNothing) {\n        const entry = this.subscriptionsByDevice.get(subscriptionDetails.deviceIdentifier);\n        if (entry === undefined) {\n            return;\n        }\n        entry.subscriptions.delete(subscriptionDetails.subscriptionIdentifier);\n        if (entry.subscriptions.size === 0) {\n            this.subscriptionsByDevice.delete(subscriptionDetails.deviceIdentifier);\n            onNoMoreSubscribers(entry.stream);\n        }\n    }\n\n    streamFor(device: Device): Promise<MediaStream> | undefined {\n        const entry = this.subscriptionsByDevice.get(device.deviceId);\n        if (entry === undefined) {\n            return undefined;\n        }\n        return entry.stream;\n    }\n}\n\nexport class RecordingDirector {\n    private readonly onUpdateDevicesListeners = new Set<OnUpdateDevicesListener>();\n    private readonly subscriptionLedger = new SubscriptionLedger();\n    private readonly devices: Array<Device> = [];\n    private onCameraSelectionChangedListeners: Set<OnCameraSelectionChangedListener> = new Set<OnCameraSelectionChangedListener>();\n    private selectedCamera: Device | undefined;\n\n    updateDevices(newDevices: Array<Device>) {\n        const availableDevicesId = newDevices.map(dev => dev.deviceId);\n        const removedDeviceIds = this.devices.filter(cur => !availableDevicesId.includes(cur.deviceId)).map(dev => dev.deviceId);\n\n        this.devices.splice(0, this.devices.length);\n        this.devices.push(...newDevices);\n        this.onUpdateDevicesListeners.forEach(it => it());\n        this.subscriptionLedger.subscriptionsTo(removedDeviceIds).forEach(sub => sub.deviceRemoved());\n    }\n\n    cameras() {\n        return this.devices.filter(device => device.kind === 'videoinput').filter(device => 'default' !== device.label);\n    }\n\n    videoStreamSubscriptionFor(device: Device): MediaStreamSubscription {\n        let subscriptionDetails = {\n            deviceIdentifier: device.deviceId,\n            stream: this.streamForDevice(device),\n            subscriptionIdentifier: uuid()\n        };\n        const subscription = new DefaultMediaStreamSubscription(this, subscriptionDetails);\n        this.subscriptionLedger.addSubscriber(subscription);\n        return subscription;\n    }\n\n    cancelSubscription(subscriptionDetails: SubscriptionDetails): void {\n        this.subscriptionLedger.removeSubscriber(subscriptionDetails, (stream) => stream.then(this.close).catch(doNothing));\n    }\n\n    private streamForDevice(device: Device): Promise<MediaStream> {\n        const maybeAlreadyAvailableStream = this.subscriptionLedger.streamFor(device);\n        if (maybeAlreadyAvailableStream !== undefined) {\n            return maybeAlreadyAvailableStream;\n        }\n        return this.videoStreamFor(device).then((stream) => {\n            // resolve the label of the device after the permission was given.\n            // we are in the then clause, so we can assume the permission was given.\n            if (device.label === '') {\n                navigator.mediaDevices.enumerateDevices().then((devices) => {\n                    const devicesWithLabels = devices.map(it => ({\n                        kind: it.kind,\n                        label: it.label,\n                        deviceId: it.deviceId,\n                        groupId: it.groupId\n                    }));\n                    console.log(devicesWithLabels);\n                    this.updateDevices(devicesWithLabels);\n                });\n\n            }\n            return stream;\n        });\n    }\n\n    private videoStreamFor(device: Device): Promise<MediaStream> {\n        return navigator.mediaDevices.getUserMedia({ video: { deviceId: device.deviceId } });\n    }\n\n    selectCamera(camera: Device) {\n        const alreadySelected = this.selectedCamera !== undefined\n            && this.selectedCamera.kind === camera.kind\n            && this.selectedCamera.groupId === camera.groupId\n            && this.selectedCamera.deviceId === camera.deviceId;\n        if (alreadySelected) {\n            console.log('already selected');\n            return;\n        }\n        this.selectedCamera = camera;\n        this.onCameraSelectionChangedListeners.forEach(listener => listener(this.selectedCamera));\n    }\n\n    clearCameraSelection() {\n        const cameraSelected = this.selectedCamera !== undefined;\n        if (cameraSelected) {\n            this.selectedCamera = undefined;\n            this.onCameraSelectionChangedListeners.forEach(listener => listener(this.selectedCamera));\n        }\n    }\n\n    addOnUpdateDevicesListener(listener: OnUpdateDevicesListener) {\n        this.onUpdateDevicesListeners.add(listener);\n    }\n\n    removeOnUpdateDevicesListener(listener: OnUpdateDevicesListener) {\n        this.onUpdateDevicesListeners.delete(listener);\n    }\n\n    addOnCameraSelectionChanged(listener: OnCameraSelectionChangedListener) {\n        this.onCameraSelectionChangedListeners.add(listener);\n        listener(this.selectedCamera);\n    }\n\n    removeOnCameraSelectionChanged(listener: OnCameraSelectionChangedListener) {\n        this.onCameraSelectionChangedListeners.delete(listener);\n    }\n\n    private close(stream: MediaStream | null): void {\n        if (stream) {\n            stream.getTracks().forEach(track => track.stop());\n        }\n    }\n}\n","import React, { CSSProperties, useState } from 'react';\nimport { TestRig } from '../test-rig/test-rig';\nimport { BigScreen } from './BigScreen';\nimport { CameraPicker } from './CameraPicker';\nimport { Context } from './DeviceDemonstratorContext';\nimport { Device, RecordingDirector } from './RecordingDirector';\n\nexport const fetchDevices = (recordingDirector: RecordingDirector) => {\n    navigator.mediaDevices.enumerateDevices()\n        .then(function (mediaDeviceInfos) {\n            const toDevice = (mediaDeviceInfo: MediaDeviceInfo): Device => {\n                return {\n                    groupId: mediaDeviceInfo.groupId,\n                    deviceId: mediaDeviceInfo.deviceId,\n                    label: mediaDeviceInfo.label,\n                    kind: mediaDeviceInfo.kind\n                };\n            };\n            recordingDirector.updateDevices(mediaDeviceInfos.map(toDevice));\n        }).catch(function (err) {\n            console.log(err.name + ': ' + err.message);\n        }\n    );\n};\n\nconst logDeviceInformation = () => {\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n        console.log(`there are ${devices.length} devices`);\n        const devicesString = devices.map(device => `${device.kind} ${device.label} (${device.groupId}:${device.deviceId})`).join('\\n');\n        console.log(devicesString);\n    }).catch((e) => console.log(e));\n};\n\nexport const CameraDemonstrator: React.FC = () => {\n    const [showCameraPicker, setShowCameraPicker] = useState(true);\n    const style: CSSProperties = {\n        display: 'flex'\n    };\n    const sidebarStyle: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column'\n    };\n    return (\n        <>\n            <div style={style}>\n                <div style={sidebarStyle}>\n                    <button onClick={logDeviceInformation}>log device information</button>\n                    <button onClick={() => setShowCameraPicker((cur) => !cur)}>toggle camera picker</button>\n                    {showCameraPicker && <CameraPicker/>}\n                </div>\n                <BigScreen/>\n            </div>\n        </>\n    );\n};\n\nexport const setupCameraDemonstrator: () => React.FC = () => {\n    const recordingDirector = new RecordingDirector();\n    const updateDevices = () => fetchDevices(recordingDirector);\n    updateDevices();\n    navigator.mediaDevices.addEventListener('devicechange', updateDevices);\n    return () => {\n        return <Context.Provider value={{ recordingDirector }}>\n            <CameraDemonstrator/>\n            <TestRig/>\n        </Context.Provider>;\n    };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { setupCameraDemonstrator } from './devices/camera/CameraDemonstrator';\n//import { formattedInputOne } from 'input/formatting/formatting-spike-one';\n//import { formattedInputTwo } from 'input/formatting/formatting-spike-two';\n\nconst Demonstrator = setupCameraDemonstrator();\n\nconst renderApplication = () => {\n    ReactDOM.render(<div>\n        <Demonstrator/>\n    </div>, document.getElementById('root'));\n};\nrenderApplication();\n"],"sourceRoot":""}