{"version":3,"sources":["devices/camera/Hide.tsx","devices/test-rig/ErrorView.tsx","devices/test-rig/Json.tsx","devices/test-rig/MediaStreamTrackView.tsx","devices/VideoElement.tsx","devices/test-rig/StreamView.tsx","devices/test-rig/test-rig.tsx","devices/camera/DeviceDemonstratorContext.ts","devices/camera/BigScreen.tsx","devices/camera/CameraPicker.tsx","devices/camera/RecordingDirector.ts","devices/camera/CameraDemonstrator.tsx","index.tsx"],"names":["Hide","props","hide","Fragment","children","ErrorView","error","name","constructor","message","JSON","stringify","Json","content","contentAsJsonString","MediaStreamTrackView","track","capabilities","getCapabilities","id","readyState","String","enabled","kind","label","muted","getConstraints","getSettings","VideoElement","srcObject","rest","videoElement","useRef","useEffect","node","current","ref","StreamView","stream","useState","forceRender","triggerRender","prev","tracks","getTracks","tracksNode","map","style","display","flexDirection","onClick","forEach","stop","autoPlay","active","reconstructPromiseFrom","result","Error","Promise","reject","resolve","initial","permissionState","scenarioSummary","scenarios","requestedDeviceTypeNotAttached","summary","TestRig","selectedScenario","setSelectedScenario","constraintsAsString","setConstraintsAsString","parseError","setParseError","constraints","setConstraints","getUserMediaResult","setGetUserMediaResult","results","setResults","setPermissionState","parsedConstraints","undefined","parse","e","scenarioConstrains","all","get","scenarioConstraintsAsString","summaries","Array","from","keys","thisOne","includes","handleClearChecks","handleRunChecks","a","scenario","checks","expected","check","predicate","messages","toString","success","what","details","onChange","value","target","navigator","mediaDevices","getUserMedia","then","catch","err","disabled","length","MediaStream","checkIndex","messagesView","messageIndex","getSupportedConstraints","Context","React","createContext","useRecordingDirector","maybe","useContext","recordingDirector","useVideoStreamFrom","device","streamError","state","setState","mediaStreamSubscription","videoStreamSubscriptionFor","onDeviceRemoved","cancel","BigScreen","setDevice","handleDeviceSelectionChange","addOnCameraSelectionChanged","removeOnCameraSelectionChanged","clearCameraSelection","CameraPreview","index","streamAvailable","deviceId","groupId","selectCamera","width","CameraPicker","showPreviews","forceReRender","availableDevicesChanged","cur","addOnUpdateDevicesListener","removeOnUpdateDevicesListener","button","previews","cameras","doNothing","DefaultMediaStreamSubscription","subscriptionDetails","_onDeviceRemoved","_canceled","_deviceRemoved","this","listener","cancelSubscription","SubscriptionLedger","subscriptionsByDevice","Map","subscription","key","creator","maybeValue","set","getOrAdd","deviceIdentifier","subscriptions","subscriptionIdentifier","removedDeviceIds","entries","filter","d","ledger","values","reduce","concat","onNoMoreSubscribers","entry","delete","size","RecordingDirector","onUpdateDevicesListeners","Set","subscriptionLedger","devices","onCameraSelectionChangedListeners","selectedCamera","newDevices","availableDevicesId","dev","splice","push","it","subscriptionsTo","sub","deviceRemoved","streamForDevice","v4","addSubscriber","removeSubscriber","close","maybeAlreadyAvailableStream","streamFor","videoStreamFor","enumerateDevices","devicesWithLabels","console","log","updateDevices","video","camera","add","logDeviceInformation","devicesString","join","CameraDemonstrator","showCameraPicker","setShowCameraPicker","Demonstrator","mediaDeviceInfos","mediaDeviceInfo","fetchDevices","addEventListener","Provider","setupCameraDemonstrator","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.413a5942.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface HideProps {\n    hide: boolean;\n}\n\nexport const Hide: React.FC<HideProps> = (props) => {\n    if (props.hide) {\n        return null;\n    }\n    return <React.Fragment>\n        {props.children}\n    </React.Fragment>;\n};\n","import React from 'react';\n\nexport const ErrorView: React.FC<{ error: Error }> = (props) => {\n    const { error } = props;\n\n    return <dl>\n        <dt>error.name</dt>\n        <dd>{error.name}</dd>\n\n        <dt>error.constructor.name</dt>\n        <dd>{error.constructor.name}</dd>\n\n        <dt>error.message</dt>\n        <dd>{error.message}</dd>\n\n        <dt>JSON.stringify(error, null, 2)</dt>\n        <dd>{JSON.stringify(error, null, 2)}</dd>\n    </dl>\n};\n","import React from 'react';\n\ninterface JsonProps {\n    content: any;\n}\n\nexport const Json: React.FC<JsonProps> = ({ content}) => {\n    const contentAsJsonString = JSON.stringify(content, null, 2);\n    return <pre>{contentAsJsonString}</pre>\n};\n","import React from 'react';\nimport { Json } from './Json';\n\nexport type MediaStreamTrackViewProps = Pick<MediaStreamTrack, 'id' | 'enabled' | 'kind' | 'label' | 'muted' | 'readyState'> & { track: MediaStreamTrack }\n\nexport const MediaStreamTrackView: React.FC<MediaStreamTrackViewProps> = (props) => {\n    const { track } = props;\n    const capabilities = track.getCapabilities ? track.getCapabilities(): 'track.getCapabilities does not exist';\n    return (\n        <dl>\n            <dt>id</dt>\n            <dd>{props.id}</dd>\n            <dt>readyState</dt>\n            <dd>{props.readyState}</dd>\n            <dt>enabled</dt>\n            <dd>{String(props.enabled)}</dd>\n            <dt>kind</dt>\n            <dd>{props.kind}</dd>\n            <dt>label</dt>\n            <dd>{props.label}</dd>\n            <dt>muted</dt>\n            <dd>{String(props.muted)}</dd>\n            <dt>capabilities</dt>\n            <dd>\n                <Json content={capabilities}/>\n            </dd>\n            <dt>constraints</dt>\n            <dd>\n                <Json content={track.getConstraints()}/>\n            </dd>\n            <dt>settings</dt>\n            <dd>\n                <Json content={track.getSettings()}/>\n            </dd>\n        </dl>\n    );\n};\n","import React, { useEffect, useRef } from 'react';\n\nexport interface HTMLVideoElementProps extends React.VideoHTMLAttributes<HTMLVideoElement> {\n    srcObject: MediaStream | null;\n}\n\nexport const VideoElement: React.FC<HTMLVideoElementProps> = ({ srcObject = null, muted = false, ...rest }) => {\n    const videoElement = useRef<HTMLVideoElement>(null);\n    useEffect(() => {\n        const node = videoElement.current;\n        if (node === null) {\n            return;\n        }\n        if (node.srcObject !== srcObject) {\n            node.srcObject = srcObject;\n        }\n        if (node.muted !== muted) {\n            node.muted = muted;\n        }\n    }, [srcObject, muted]);\n    return <video {...rest} ref={videoElement}/>;\n};\n","import React, { CSSProperties, useState } from 'react';\nimport { MediaStreamTrackView } from './MediaStreamTrackView';\nimport { VideoElement } from '../VideoElement';\n\nexport interface StreamViewProps {\n    stream: MediaStream | null\n}\n\nexport const StreamView: React.FC<StreamViewProps> = (props) => {\n    const { stream } = props;\n    const [_, forceRender] = useState(true);\n\n    const triggerRender = () => {\n        forceRender(prev => !prev);\n    };\n\n    const tracks = (): Array<MediaStreamTrack> => {\n        const maybeStream = stream;\n        if (null === maybeStream) {\n            return [];\n        }\n        return maybeStream.getTracks();\n    };\n\n    const handlePause = () => {\n        tracks().forEach(track => track.enabled = false);\n        triggerRender();\n    };\n\n    const handleContinue = () => {\n        tracks().forEach(track => track.enabled = true);\n        triggerRender();\n    };\n\n    const handleStop = () => {\n        tracks().forEach(track => track.stop());\n        triggerRender();\n    };\n\n    const topStyles: CSSProperties = {\n        display: 'flex'\n    };\n\n    const controlStyles: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column'\n    };\n\n    const tracksNode = tracks().map(track => {\n        return (<li key={track.id}>\n            <MediaStreamTrackView enabled={track.enabled} id={track.id} kind={track.kind} label={track.label} muted={track.muted} readyState={track.readyState} track={track}/>\n        </li>);\n    });\n    return (\n        <div style={topStyles}>\n            <h1>Scenario View</h1>\n            <div style={controlStyles}>\n                <button onClick={handlePause}>pause</button>\n                <button onClick={handleContinue}>continue</button>\n                <button onClick={handleStop}>stop</button>\n            </div>\n            <VideoElement id=\"video-chat\" srcObject={stream} autoPlay={true}/>\n            {stream && <div>\n                <h2>stream</h2>\n                <ul>\n                    <li>id: {stream.id}</li>\n                    <li>active: {JSON.stringify(stream.active)}</li>\n                </ul>\n                <h2>tracks</h2>\n                <ul>\n                    {tracksNode}\n                </ul>\n            </div>}\n        </div>\n    );\n};\n","import React, { CSSProperties, useEffect, useState } from 'react';\nimport { Hide } from '../camera/Hide';\nimport { ErrorView } from './ErrorView';\nimport { Json } from './Json';\nimport { MediaStreamCheckResult, scenarios } from '@fakes/media-devices';\nimport { StreamView } from './StreamView';\n\nexport interface Result {\n    what: string;\n    details: MediaStreamCheckResult;\n}\n\ntype GetUserMediaResult = MediaStream | Error\n\nconst reconstructPromiseFrom = (result: GetUserMediaResult): Promise<MediaStream> => {\n    if (result instanceof Error) {\n        return Promise.reject(result);\n    }\n    return Promise.resolve(result);\n};\n\nconst initial: { permissionState: PermissionState, scenarioSummary: string } = {\n    permissionState: 'granted',\n    scenarioSummary: scenarios.requestedDeviceTypeNotAttached.summary\n};\n\nexport const TestRig: React.FC<{}> = () => {\n    const [selectedScenario, setSelectedScenario] = useState<string>();\n    const [constraintsAsString, setConstraintsAsString] = useState('');\n    const [parseError, setParseError] = useState<boolean>(false);\n    const [constraints, setConstraints] = useState<MediaStreamConstraints>();\n    const [getUserMediaResult, setGetUserMediaResult] = useState<GetUserMediaResult | null>(null);\n    const [results, setResults] = useState<Result[]>([]);\n    const [permissionState, setPermissionState] = useState<PermissionState>(initial.permissionState);\n\n    useEffect(() => {\n        try {\n            const parsedConstraints = (constraintsAsString === 'undefined') ? undefined : JSON.parse(constraintsAsString);\n            setConstraints(parsedConstraints);\n            setParseError(false);\n        } catch (e) {\n            setParseError(true);\n        }\n    }, [constraintsAsString, setParseError]);\n\n    useEffect(() => {\n        if (selectedScenario === undefined) {\n            const summaries = Array.from(scenarios.all.keys());\n            const thisOne = summaries.includes(initial.scenarioSummary) ? initial.scenarioSummary : summaries[0];\n            setSelectedScenario(thisOne);\n            return;\n        }\n        const scenarioConstrains = scenarios.all.get(selectedScenario)?.constraints;\n        const scenarioConstraintsAsString = scenarioConstrains === undefined ? 'undefined' : JSON.stringify(scenarioConstrains, null, 2);\n        setConstraintsAsString(scenarioConstraintsAsString);\n    }, [selectedScenario]);\n\n    useEffect(() => {\n        setResults(() => []);\n    }, [selectedScenario]);\n\n    const handleStart = () => {\n        navigator.mediaDevices.getUserMedia(constraints)\n            .then((stream: MediaStream) => setGetUserMediaResult(() => stream))\n            .catch((err: Error) => setGetUserMediaResult(() => err));\n    };\n\n    const handleClearChecks = () => {\n        setResults(() => []);\n    };\n\n    const handleDetach = () => {\n        if (getUserMediaResult instanceof MediaStream) {\n            getUserMediaResult.getTracks().forEach(track => track.stop());\n        }\n        handleClearChecks()\n        setGetUserMediaResult(null);\n    };\n\n    const handleRunChecks = async () => {\n        const scenario = scenarios.all.get(selectedScenario ?? '');\n        if (scenario === undefined || getUserMediaResult === null) {\n            return;\n        }\n        const checks = scenario.expected[permissionState]?.checks ?? [];\n        const results = checks.map(async check => {\n            let result: MediaStreamCheckResult;\n            try {\n                result = await check.predicate(reconstructPromiseFrom(getUserMediaResult));\n            } catch (e) {\n                const messages = [`check threw exception ${e.toString()}`];\n                result = { success: false, messages };\n            }\n            return ({\n                what: check.what,\n                details: result\n            });\n        });\n        setResults(await Promise.all(results));\n    };\n\n\n    const blub: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column'\n    };\n    const banana: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'row'\n    };\n\n    return <div>\n        <h1 key={'test-rig'}>Test Rig{parseError ? ' (parse error)' : ''}</h1>\n        <div style={banana}>\n            <div style={blub}>\n                <select name=\"device\">\n                    <option>camera</option>\n                    <option>microphone</option>\n                </select>\n                <select name=\"permission\" onChange={(e) => {\n                    const value = e.target.value;\n                    if (value === 'granted' || value === 'denied' || value === 'prompt') {\n                        setPermissionState(value);\n                    }\n                }} value={permissionState}>\n                    <option value={'granted'}>granted</option>\n                    <option value={'denied'}>denied</option>\n                    <option value={'prompt'}>prompt</option>\n                </select>\n                <select name=\"scenarios\"\n                        value={selectedScenario}\n                        onChange={(e) => setSelectedScenario(e.target.value)}>\n                    {Array.from(scenarios.all.keys()).map(summary => <option value={summary} key={summary}>{summary}</option>)}\n                </select>\n            </div>\n            <textarea value={constraintsAsString} onChange={(e) => setConstraintsAsString(e.target.value)}/>\n            <button onClick={handleStart}>start</button>\n            <button disabled={getUserMediaResult === null} onClick={handleRunChecks}>run checks</button>\n            <button disabled={results.length === 0} onClick={handleClearChecks}>clear checks</button>\n            <button onClick={handleDetach}>detach</button>\n            <ul key={'results'}>\n                {results.map((result, checkIndex) => {\n                    const success = result.details.success ? '✅' : '❌';\n                    const messages = result.details.messages ?? [];\n\n                    const showMessages = !result.details.success && messages.length !== 0;\n                    const messagesView = showMessages ? <ul key={`message ${checkIndex}`}>\n                        {messages.map((message, messageIndex) => <li key={`message ${checkIndex} ${messageIndex}`}>{message}</li>)}\n                    </ul> : null;\n\n                    return <React.Fragment key={`doombuggy ${checkIndex}`}>\n                        <li key={`check result ${checkIndex}`}>{`${success}: ${result.what}`}</li>\n                        {messagesView}\n                    </React.Fragment>;\n                })}\n            </ul>\n        </div>\n        {getUserMediaResult === null ? null :\n            getUserMediaResult instanceof MediaStream ?\n                <StreamView stream={getUserMediaResult}/> :\n                <ErrorView error={getUserMediaResult}/>}\n        <Hide hide={true}>\n            <Json content={navigator.mediaDevices.getSupportedConstraints()}/>\n        </Hide>\n    </div>;\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { Device, RecordingDirector } from './RecordingDirector';\n\nexport interface DeviceDemonstratorContext {\n    recordingDirector: RecordingDirector;\n}\n\nexport const Context = React.createContext<DeviceDemonstratorContext | void>(undefined);\n\nexport const useRecordingDirector = (): RecordingDirector => {\n    const maybe = useContext(Context);\n    if (undefined === maybe) {\n        throw new Error('Context not available in component tree parents');\n    }\n    return maybe.recordingDirector;\n};\n\nexport type StreamError = 'CouldNotOpen' | 'DeviceRemoved';\n\nexport interface VideoStream {\n    stream: MediaStream | null;\n    streamError: StreamError | 'none';\n}\n\nexport const useVideoStreamFrom = (device: Device | void): VideoStream => {\n    const recordingDirector = useRecordingDirector();\n    const [state, setState] = useState<VideoStream>({ stream: null, streamError: 'none' });\n    useEffect(() => {\n        if (undefined === device) {\n            return;\n        }\n        const mediaStreamSubscription = recordingDirector.videoStreamSubscriptionFor(device);\n        mediaStreamSubscription.onDeviceRemoved(() => {\n            mediaStreamSubscription.cancel()\n            setState({ stream: null, streamError: 'DeviceRemoved' });\n        });\n        mediaStreamSubscription.stream\n            .then(stream => setState(() => ({ stream, streamError: 'none' })))\n            .catch(() => setState(() => ({ stream: null, streamError: 'CouldNotOpen' })));\n        return () => {\n            mediaStreamSubscription.cancel();\n            setState(() => ({ stream: null, streamError: 'none' }));\n        };\n    }, [recordingDirector, device]);\n    return state;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useRecordingDirector, useVideoStreamFrom } from './DeviceDemonstratorContext';\nimport { Device } from './RecordingDirector';\nimport { VideoElement } from '../VideoElement';\n\nexport const BigScreen: React.FC = () => {\n    const [device, setDevice] = useState<Device | void>(undefined);\n    const recordingDirector = useRecordingDirector();\n\n    useEffect(() => {\n        const handleDeviceSelectionChange = (device: Device | void): void => {\n            setDevice(() => device);\n        };\n        recordingDirector.addOnCameraSelectionChanged(handleDeviceSelectionChange);\n        return () => {\n            recordingDirector.removeOnCameraSelectionChanged(handleDeviceSelectionChange);\n        };\n    }, [recordingDirector]);\n    const { stream, streamError } = useVideoStreamFrom(device);\n    if (device === undefined) {\n        return <div>No device selected</div>;\n    }\n    if (!(streamError === 'none')) {\n        return <div>{streamError}</div>;\n    }\n    if (stream === null) {\n        return <div>Opening stream</div>;\n    }\n    const handleVideoClicked = () => {\n        recordingDirector.clearCameraSelection();\n    };\n    return (\n        <div>\n            <VideoElement srcObject={stream} autoPlay={true} onClick={handleVideoClicked}/>\n            <div>{stream.id}</div>\n        </div>\n    );\n};\n","import React, { CSSProperties, useEffect, useState } from 'react';\nimport { useRecordingDirector, useVideoStreamFrom } from './DeviceDemonstratorContext';\nimport { Device, RecordingDirector } from './RecordingDirector';\nimport { VideoElement } from '../VideoElement';\n\nexport interface CameraPreviewProps {\n    recordingDirector: RecordingDirector;\n    device: Device;\n    index: number;\n}\n\nexport const CameraPreview: React.FC<CameraPreviewProps> = (props) => {\n    const { recordingDirector, device, index } = props;\n    const { stream, streamError } = useVideoStreamFrom(device);\n\n    const handleSelect = () => {\n        recordingDirector.selectCamera(device);\n    };\n\n    const streamAvailable = streamError === 'none';\n    return (\n        <div>\n            <h4>Camera {index}</h4>\n            <ul>\n                <li>device label: {device.label}</li>\n                <li>device id: {device.deviceId}</li>\n                <li>group id: {device.groupId}</li>\n                <li>stream id: {stream?.id ?? 'no-stream'}</li>\n            </ul>\n            {!streamAvailable && <div>{streamError}</div>}\n            {streamAvailable && <VideoElement onClick={handleSelect} width={150} srcObject={stream} autoPlay={true}/>}\n        </div>\n    );\n};\n\nexport const CameraPicker: React.FC = () => {\n    const recordingDirector = useRecordingDirector();\n    const [{ showPreviews }, setState] = useState({ showPreviews: false, forceReRender: 0 });\n    useEffect(() => {\n        const availableDevicesChanged = () => {\n            setState((cur) => ({\n                ...cur,\n                forceReRender: cur.forceReRender + 1\n            }));\n        };\n        recordingDirector.addOnUpdateDevicesListener(availableDevicesChanged);\n        return () => {\n            recordingDirector.removeOnUpdateDevicesListener(availableDevicesChanged);\n        };\n    }, [recordingDirector]);\n\n    const handleShowPreview = () => setState(cur => ({ ...cur, showPreviews: true }));\n\n    const handleHidePreview = () => setState(cur => ({ ...cur, showPreviews: false }));\n\n    const button = showPreviews ? <button onClick={handleHidePreview}>Hide Previews</button> : <button onClick={handleShowPreview}>Show Previews</button>;\n    const previews = showPreviews ? recordingDirector.cameras()\n        .map((device, index) => <CameraPreview key={device.deviceId} index={index} device={device} recordingDirector={recordingDirector}/>) : null;\n    const style: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column'\n    };\n    return (\n        <div style={style}>\n            {button}\n            {previews}\n        </div>\n    );\n};\n","import { v4 } from 'uuid';\n\nexport type Device = Pick<MediaDeviceInfo, 'groupId' | 'deviceId' | 'kind' | 'label'>;\n\nexport type OnCameraSelectionChangedListener = (newCamera: Device | void) => void;\nexport type OnUpdateDevicesListener = () => void;\n\ninterface SubscriptionDetails {\n    readonly deviceIdentifier: DeviceIdentifier\n    readonly subscriptionIdentifier: SubscriptionIdentifier;\n    stream: Promise<MediaStream>\n}\n\nconst doNothing = () => {\n};\n\nexport interface MediaStreamSubscription {\n    readonly stream: Promise<MediaStream>;\n\n    onDeviceRemoved: (listener: () => void) => void\n\n    cancel(): void;\n}\n\nclass DefaultMediaStreamSubscription implements MediaStreamSubscription {\n    private _onDeviceRemoved = () => {\n    };\n    private _canceled = false;\n    private _deviceRemoved = false;\n\n    constructor(\n        private readonly recordingDirector: RecordingDirector,\n        public readonly subscriptionDetails: SubscriptionDetails) {\n    }\n\n    get stream() {\n        if (this._canceled || this._deviceRemoved) {\n            return Promise.reject('subscription canceled');\n        }\n        return this.subscriptionDetails.stream;\n    }\n\n    onDeviceRemoved(listener: () => void) {\n        this._onDeviceRemoved = listener;\n    }\n\n    deviceRemoved() {\n        this._deviceRemoved = true;\n        this._onDeviceRemoved();\n    }\n\n    cancel() {\n        this.recordingDirector.cancelSubscription(this.subscriptionDetails);\n        this._canceled = true;\n    }\n}\n\nconst getOrAdd = <Key, Value>(map: Map<Key, Value>, key: Key, creator: (key: Key) => Value): Value => {\n    const maybeValue = map.get(key);\n    if (maybeValue !== undefined) {\n        return maybeValue;\n    }\n    const value = creator(key);\n    map.set(key, value);\n    return value;\n};\n\ntype DeviceIdentifier = string;\ntype SubscriptionIdentifier = string;\n\ninterface SubscriptionLedgerEntry {\n    subscriptions: Map<SubscriptionIdentifier, DefaultMediaStreamSubscription>;\n    stream: Promise<MediaStream>;\n}\n\nclass SubscriptionLedger {\n    private readonly subscriptionsByDevice = new Map<DeviceIdentifier, SubscriptionLedgerEntry>();\n\n    addSubscriber(subscription: DefaultMediaStreamSubscription) {\n        const newEntry = () => ({ stream: subscription.stream, subscriptions: new Map<SubscriptionIdentifier, DefaultMediaStreamSubscription>() });\n        const details = subscription.subscriptionDetails;\n        const entry = getOrAdd(this.subscriptionsByDevice, details.deviceIdentifier, newEntry);\n        entry.subscriptions.set(details.subscriptionIdentifier, subscription);\n    }\n\n    subscriptionsTo(removedDeviceIds: string[]): DefaultMediaStreamSubscription[] {\n        return Array.from(this.subscriptionsByDevice.entries())\n            .filter(([d, _]) => removedDeviceIds.includes(d))\n            .map(([_, ledger]) => Array.from(ledger.subscriptions.values()))\n            .reduce((prev, cur) => prev.concat(cur), []);\n    }\n\n    removeSubscriber(subscriptionDetails: SubscriptionDetails, onNoMoreSubscribers: (stream: Promise<MediaStream>) => void = doNothing) {\n        const entry = this.subscriptionsByDevice.get(subscriptionDetails.deviceIdentifier);\n        if (entry === undefined) {\n            return;\n        }\n        entry.subscriptions.delete(subscriptionDetails.subscriptionIdentifier);\n        if (entry.subscriptions.size === 0) {\n            this.subscriptionsByDevice.delete(subscriptionDetails.deviceIdentifier);\n            onNoMoreSubscribers(entry.stream);\n        }\n    }\n\n    streamFor(device: Device): Promise<MediaStream> | undefined {\n        const entry = this.subscriptionsByDevice.get(device.deviceId);\n        if (entry === undefined) {\n            return undefined;\n        }\n        return entry.stream;\n    }\n}\n\nexport class RecordingDirector {\n    private readonly onUpdateDevicesListeners = new Set<OnUpdateDevicesListener>();\n    private readonly subscriptionLedger = new SubscriptionLedger();\n    private readonly devices: Array<Device> = [];\n    private onCameraSelectionChangedListeners: Set<OnCameraSelectionChangedListener> = new Set<OnCameraSelectionChangedListener>();\n    private selectedCamera: Device | undefined;\n\n    updateDevices(newDevices: Array<Device>) {\n        const availableDevicesId = newDevices.map(dev => dev.deviceId);\n        const removedDeviceIds = this.devices.filter(cur => !availableDevicesId.includes(cur.deviceId)).map(dev => dev.deviceId);\n\n        this.devices.splice(0, this.devices.length);\n        this.devices.push(...newDevices);\n        this.onUpdateDevicesListeners.forEach(it => it());\n        this.subscriptionLedger.subscriptionsTo(removedDeviceIds).forEach(sub => sub.deviceRemoved());\n    }\n\n    cameras() {\n        return this.devices.filter(device => device.kind === 'videoinput').filter(device => 'default' !== device.label);\n    }\n\n    videoStreamSubscriptionFor(device: Device): MediaStreamSubscription {\n        let subscriptionDetails = {\n            deviceIdentifier: device.deviceId,\n            stream: this.streamForDevice(device),\n            subscriptionIdentifier: v4()\n        };\n        const subscription = new DefaultMediaStreamSubscription(this, subscriptionDetails);\n        this.subscriptionLedger.addSubscriber(subscription);\n        return subscription;\n    }\n\n    cancelSubscription(subscriptionDetails: SubscriptionDetails): void {\n        this.subscriptionLedger.removeSubscriber(subscriptionDetails, (stream) => stream.then(this.close).catch(doNothing));\n    }\n\n    private streamForDevice(device: Device): Promise<MediaStream> {\n        const maybeAlreadyAvailableStream = this.subscriptionLedger.streamFor(device);\n        if (maybeAlreadyAvailableStream !== undefined) {\n            return maybeAlreadyAvailableStream;\n        }\n        return this.videoStreamFor(device).then((stream) => {\n            // resolve the label of the device after the permission was given.\n            // we are in the then clause, so we can assume the permission was given.\n            if (device.label === '') {\n                navigator.mediaDevices.enumerateDevices().then((devices) => {\n                    const devicesWithLabels = devices.map(it => ({\n                        kind: it.kind,\n                        label: it.label,\n                        deviceId: it.deviceId,\n                        groupId: it.groupId\n                    }));\n                    console.log(devicesWithLabels);\n                    this.updateDevices(devicesWithLabels);\n                });\n\n            }\n            return stream;\n        });\n    }\n\n    private videoStreamFor(device: Device): Promise<MediaStream> {\n        return navigator.mediaDevices.getUserMedia({ video: { deviceId: device.deviceId } });\n    }\n\n    selectCamera(camera: Device) {\n        const alreadySelected = this.selectedCamera !== undefined\n            && this.selectedCamera.kind === camera.kind\n            && this.selectedCamera.groupId === camera.groupId\n            && this.selectedCamera.deviceId === camera.deviceId;\n        if (alreadySelected) {\n            console.log('already selected');\n            return;\n        }\n        this.selectedCamera = camera;\n        this.onCameraSelectionChangedListeners.forEach(listener => listener(this.selectedCamera));\n    }\n\n    clearCameraSelection() {\n        const cameraSelected = this.selectedCamera !== undefined;\n        if (cameraSelected) {\n            this.selectedCamera = undefined;\n            this.onCameraSelectionChangedListeners.forEach(listener => listener(this.selectedCamera));\n        }\n    }\n\n    addOnUpdateDevicesListener(listener: OnUpdateDevicesListener) {\n        this.onUpdateDevicesListeners.add(listener);\n    }\n\n    removeOnUpdateDevicesListener(listener: OnUpdateDevicesListener) {\n        this.onUpdateDevicesListeners.delete(listener);\n    }\n\n    addOnCameraSelectionChanged(listener: OnCameraSelectionChangedListener) {\n        this.onCameraSelectionChangedListeners.add(listener);\n        listener(this.selectedCamera);\n    }\n\n    removeOnCameraSelectionChanged(listener: OnCameraSelectionChangedListener) {\n        this.onCameraSelectionChangedListeners.delete(listener);\n    }\n\n    private close(stream: MediaStream | null): void {\n        if (stream) {\n            stream.getTracks().forEach(track => track.stop());\n        }\n    }\n}\n","import React, { CSSProperties, useState } from 'react';\nimport { TestRig } from '../test-rig/test-rig';\nimport { BigScreen } from './BigScreen';\nimport { CameraPicker } from './CameraPicker';\nimport { Context } from './DeviceDemonstratorContext';\nimport { Device, RecordingDirector } from './RecordingDirector';\n\nexport const fetchDevices = (recordingDirector: RecordingDirector) => {\n    navigator.mediaDevices.enumerateDevices()\n        .then(function (mediaDeviceInfos) {\n            const toDevice = (mediaDeviceInfo: MediaDeviceInfo): Device => {\n                return {\n                    groupId: mediaDeviceInfo.groupId,\n                    deviceId: mediaDeviceInfo.deviceId,\n                    label: mediaDeviceInfo.label,\n                    kind: mediaDeviceInfo.kind\n                };\n            };\n            recordingDirector.updateDevices(mediaDeviceInfos.map(toDevice));\n        }).catch(function (err) {\n            console.log(err.name + ': ' + err.message);\n        }\n    );\n};\n\nconst logDeviceInformation = () => {\n    navigator.mediaDevices.enumerateDevices().then(devices => {\n        console.log(`there are ${devices.length} devices`);\n        const devicesString = devices.map(device => `${device.kind} ${device.label} (${device.groupId}:${device.deviceId})`).join('\\n');\n        console.log(devicesString);\n    }).catch((e) => console.log(e));\n};\n\nexport const CameraDemonstrator: React.FC = () => {\n    const [showCameraPicker, setShowCameraPicker] = useState(true);\n    const style: CSSProperties = {\n        display: 'flex'\n    };\n    const sidebarStyle: CSSProperties = {\n        display: 'flex',\n        flexDirection: 'column'\n    };\n    return (\n        <>\n            <div style={style}>\n                <div style={sidebarStyle}>\n                    <button onClick={logDeviceInformation}>log device information</button>\n                    <button onClick={() => setShowCameraPicker((cur) => !cur)}>toggle camera picker</button>\n                    {showCameraPicker && <CameraPicker/>}\n                </div>\n                <BigScreen/>\n            </div>\n        </>\n    );\n};\n\nexport const setupCameraDemonstrator: () => React.FC = () => {\n    const recordingDirector = new RecordingDirector();\n    const updateDevices = () => fetchDevices(recordingDirector);\n    updateDevices();\n    navigator.mediaDevices.addEventListener('devicechange', updateDevices);\n    return () => {\n        return <Context.Provider value={{ recordingDirector }}>\n            <CameraDemonstrator/>\n            <TestRig/>\n        </Context.Provider>;\n    };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import { formattedInputOne } from 'input/formatting/formatting-spike-one';\n//import { formattedInputTwo } from 'input/formatting/formatting-spike-two';\n//import { setupWebRtcDemonstrator } from 'webrtc/WebRtcDemonstrator';\nimport { setupCameraDemonstrator } from 'devices/camera/CameraDemonstrator';\n//import { setupSimplePeerDemonstrator } from 'webrtc/SimplePeerDemonstrator';\nconst Demonstrator = setupCameraDemonstrator();\n\nconst renderApplication = () => {\n    ReactDOM.render(<div>\n        <Demonstrator/>\n    </div>, document.getElementById('root'));\n};\nrenderApplication();\n"],"sourceRoot":""}